name: Platform - Container Publishing

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      no_cache:
        type: boolean
        description: 'Build from scratch, without using cached layers'
        default: false
      registry:
        type: choice
        description: 'Container registry to publish to'
        options:
          - 'both'
          - 'ghcr'
          - 'dockerhub'
        default: 'both'

env:
  GHCR_REGISTRY: ghcr.io
  GHCR_IMAGE_BASE: ${{ github.repository_owner }}/autogpt-platform
  DOCKERHUB_IMAGE_BASE: ${{ secrets.DOCKER_USER }}/autogpt-platform

permissions:
  contents: read
  packages: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: inputs.registry == 'both' || inputs.registry == 'ghcr' || github.event_name == 'release'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: (inputs.registry == 'both' || inputs.registry == 'dockerhub' || github.event_name == 'release') && secrets.DOCKER_USER
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_BASE }}-${{ matrix.component }}
            ${{ secrets.DOCKER_USER && format('{0}-{1}', env.DOCKERHUB_IMAGE_BASE, matrix.component) || '' }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set build context and dockerfile for backend
        if: matrix.component == 'backend'
        run: |
          echo "BUILD_CONTEXT=." >> $GITHUB_ENV
          echo "DOCKERFILE=autogpt_platform/backend/Dockerfile" >> $GITHUB_ENV
          echo "BUILD_TARGET=server" >> $GITHUB_ENV

      - name: Set build context and dockerfile for frontend
        if: matrix.component == 'frontend'
        run: |
          echo "BUILD_CONTEXT=." >> $GITHUB_ENV
          echo "DOCKERFILE=autogpt_platform/frontend/Dockerfile" >> $GITHUB_ENV
          echo "BUILD_TARGET=prod" >> $GITHUB_ENV

      - name: Build and push container image
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.BUILD_CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          target: ${{ env.BUILD_TARGET }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: ${{ !inputs.no_cache && 'type=gha' || '' }},scope=platform-${{ matrix.component }}
          cache-to: type=gha,scope=platform-${{ matrix.component }},mode=max

      - name: Generate build summary
        run: |
          echo "## 🐳 Container Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Component:** ${{ matrix.component }}" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ${{ inputs.registry || 'both' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images Published:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | sed 's/,/\n/g' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY