/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * AutoGPT Agent Server
 * This server is used to execute agents that are created by the AutoGPT system.
 * OpenAPI spec version: 0.1
 */
import { useInfiniteQuery, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { BlockCategoryResponse } from "../../models/blockCategoryResponse";

import type { BlockResponse } from "../../models/blockResponse";

import type { CountResponse } from "../../models/countResponse";

import type { GetV2GetBuilderBlockCategoriesParams } from "../../models/getV2GetBuilderBlockCategoriesParams";

import type { GetV2GetBuilderBlocksParams } from "../../models/getV2GetBuilderBlocksParams";

import type { GetV2GetBuilderIntegrationProvidersParams } from "../../models/getV2GetBuilderIntegrationProvidersParams";

import type { HTTP401NotAuthenticatedErrorResponse } from "../../models/hTTP401NotAuthenticatedErrorResponse";

import type { HTTPValidationError } from "../../models/hTTPValidationError";

import type { ProviderResponse } from "../../models/providerResponse";

import type { SuggestionsResponse } from "../../models/suggestionsResponse";

import { customMutator } from "../../../mutators/custom-mutator";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Get all suggestions for the Blocks Menu.
 * @summary Get Builder suggestions
 */
export type getV2GetBuilderSuggestionsResponse200 = {
  data: SuggestionsResponse;
  status: 200;
};

export type getV2GetBuilderSuggestionsResponse401 = {
  data: HTTP401NotAuthenticatedErrorResponse;
  status: 401;
};

export type getV2GetBuilderSuggestionsResponseComposite =
  | getV2GetBuilderSuggestionsResponse200
  | getV2GetBuilderSuggestionsResponse401;

export type getV2GetBuilderSuggestionsResponse =
  getV2GetBuilderSuggestionsResponseComposite & {
    headers: Headers;
  };

export const getGetV2GetBuilderSuggestionsUrl = () => {
  return `/api/builder/suggestions`;
};

export const getV2GetBuilderSuggestions = async (
  options?: RequestInit,
): Promise<getV2GetBuilderSuggestionsResponse> => {
  return customMutator<getV2GetBuilderSuggestionsResponse>(
    getGetV2GetBuilderSuggestionsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2GetBuilderSuggestionsQueryKey = () => {
  return [`/api/builder/suggestions`] as const;
};

export const getGetV2GetBuilderSuggestionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2GetBuilderSuggestions>>,
  TError = HTTP401NotAuthenticatedErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV2GetBuilderSuggestions>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV2GetBuilderSuggestionsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2GetBuilderSuggestions>>
  > = ({ signal }) => getV2GetBuilderSuggestions({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2GetBuilderSuggestions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2GetBuilderSuggestionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2GetBuilderSuggestions>>
>;
export type GetV2GetBuilderSuggestionsQueryError =
  HTTP401NotAuthenticatedErrorResponse;

export function useGetV2GetBuilderSuggestions<
  TData = Awaited<ReturnType<typeof getV2GetBuilderSuggestions>>,
  TError = HTTP401NotAuthenticatedErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderSuggestions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetBuilderSuggestions>>,
          TError,
          Awaited<ReturnType<typeof getV2GetBuilderSuggestions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetBuilderSuggestions<
  TData = Awaited<ReturnType<typeof getV2GetBuilderSuggestions>>,
  TError = HTTP401NotAuthenticatedErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderSuggestions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetBuilderSuggestions>>,
          TError,
          Awaited<ReturnType<typeof getV2GetBuilderSuggestions>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetBuilderSuggestions<
  TData = Awaited<ReturnType<typeof getV2GetBuilderSuggestions>>,
  TError = HTTP401NotAuthenticatedErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderSuggestions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Builder suggestions
 */

export function useGetV2GetBuilderSuggestions<
  TData = Awaited<ReturnType<typeof getV2GetBuilderSuggestions>>,
  TError = HTTP401NotAuthenticatedErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderSuggestions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2GetBuilderSuggestionsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get Builder suggestions
 */
export const prefetchGetV2GetBuilderSuggestionsQuery = async <
  TData = Awaited<ReturnType<typeof getV2GetBuilderSuggestions>>,
  TError = HTTP401NotAuthenticatedErrorResponse,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderSuggestions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetV2GetBuilderSuggestionsQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * Get all block categories with a specified number of blocks per category.
 * @summary Get Builder block categories
 */
export type getV2GetBuilderBlockCategoriesResponse200 = {
  data: BlockCategoryResponse[];
  status: 200;
};

export type getV2GetBuilderBlockCategoriesResponse401 = {
  data: HTTP401NotAuthenticatedErrorResponse;
  status: 401;
};

export type getV2GetBuilderBlockCategoriesResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2GetBuilderBlockCategoriesResponseComposite =
  | getV2GetBuilderBlockCategoriesResponse200
  | getV2GetBuilderBlockCategoriesResponse401
  | getV2GetBuilderBlockCategoriesResponse422;

export type getV2GetBuilderBlockCategoriesResponse =
  getV2GetBuilderBlockCategoriesResponseComposite & {
    headers: Headers;
  };

export const getGetV2GetBuilderBlockCategoriesUrl = (
  params?: GetV2GetBuilderBlockCategoriesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/builder/categories?${stringifiedParams}`
    : `/api/builder/categories`;
};

export const getV2GetBuilderBlockCategories = async (
  params?: GetV2GetBuilderBlockCategoriesParams,
  options?: RequestInit,
): Promise<getV2GetBuilderBlockCategoriesResponse> => {
  return customMutator<getV2GetBuilderBlockCategoriesResponse>(
    getGetV2GetBuilderBlockCategoriesUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2GetBuilderBlockCategoriesQueryKey = (
  params?: GetV2GetBuilderBlockCategoriesParams,
) => {
  return [`/api/builder/categories`, ...(params ? [params] : [])] as const;
};

export const getGetV2GetBuilderBlockCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2GetBuilderBlockCategories>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderBlockCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderBlockCategories>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV2GetBuilderBlockCategoriesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2GetBuilderBlockCategories>>
  > = ({ signal }) =>
    getV2GetBuilderBlockCategories(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2GetBuilderBlockCategories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2GetBuilderBlockCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2GetBuilderBlockCategories>>
>;
export type GetV2GetBuilderBlockCategoriesQueryError =
  | HTTP401NotAuthenticatedErrorResponse
  | HTTPValidationError;

export function useGetV2GetBuilderBlockCategories<
  TData = Awaited<ReturnType<typeof getV2GetBuilderBlockCategories>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params: undefined | GetV2GetBuilderBlockCategoriesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderBlockCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetBuilderBlockCategories>>,
          TError,
          Awaited<ReturnType<typeof getV2GetBuilderBlockCategories>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetBuilderBlockCategories<
  TData = Awaited<ReturnType<typeof getV2GetBuilderBlockCategories>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderBlockCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderBlockCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetBuilderBlockCategories>>,
          TError,
          Awaited<ReturnType<typeof getV2GetBuilderBlockCategories>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetBuilderBlockCategories<
  TData = Awaited<ReturnType<typeof getV2GetBuilderBlockCategories>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderBlockCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderBlockCategories>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Builder block categories
 */

export function useGetV2GetBuilderBlockCategories<
  TData = Awaited<ReturnType<typeof getV2GetBuilderBlockCategories>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderBlockCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderBlockCategories>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2GetBuilderBlockCategoriesQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get Builder block categories
 */
export const prefetchGetV2GetBuilderBlockCategoriesQuery = async <
  TData = Awaited<ReturnType<typeof getV2GetBuilderBlockCategories>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  queryClient: QueryClient,
  params?: GetV2GetBuilderBlockCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderBlockCategories>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetV2GetBuilderBlockCategoriesQueryOptions(
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * Get blocks based on either category, type, or provider.
 * @summary Get Builder blocks
 */
export type getV2GetBuilderBlocksResponse200 = {
  data: BlockResponse;
  status: 200;
};

export type getV2GetBuilderBlocksResponse401 = {
  data: HTTP401NotAuthenticatedErrorResponse;
  status: 401;
};

export type getV2GetBuilderBlocksResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2GetBuilderBlocksResponseComposite =
  | getV2GetBuilderBlocksResponse200
  | getV2GetBuilderBlocksResponse401
  | getV2GetBuilderBlocksResponse422;

export type getV2GetBuilderBlocksResponse =
  getV2GetBuilderBlocksResponseComposite & {
    headers: Headers;
  };

export const getGetV2GetBuilderBlocksUrl = (
  params?: GetV2GetBuilderBlocksParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/builder/blocks?${stringifiedParams}`
    : `/api/builder/blocks`;
};

export const getV2GetBuilderBlocks = async (
  params?: GetV2GetBuilderBlocksParams,
  options?: RequestInit,
): Promise<getV2GetBuilderBlocksResponse> => {
  return customMutator<getV2GetBuilderBlocksResponse>(
    getGetV2GetBuilderBlocksUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2GetBuilderBlocksQueryKey = (
  params?: GetV2GetBuilderBlocksParams,
) => {
  return [`/api/builder/blocks`, ...(params ? [params] : [])] as const;
};

export const getGetV2GetBuilderBlocksInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
    GetV2GetBuilderBlocksParams["page"]
  >,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderBlocksParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
        TError,
        TData,
        QueryKey,
        GetV2GetBuilderBlocksParams["page"]
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV2GetBuilderBlocksQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
    QueryKey,
    GetV2GetBuilderBlocksParams["page"]
  > = ({ signal, pageParam }) =>
    getV2GetBuilderBlocks(
      { ...params, page: pageParam || params?.["page"] },
      { signal, ...requestOptions },
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
    TError,
    TData,
    QueryKey,
    GetV2GetBuilderBlocksParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2GetBuilderBlocksInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2GetBuilderBlocks>>
>;
export type GetV2GetBuilderBlocksInfiniteQueryError =
  | HTTP401NotAuthenticatedErrorResponse
  | HTTPValidationError;

export function useGetV2GetBuilderBlocksInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
    GetV2GetBuilderBlocksParams["page"]
  >,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params: undefined | GetV2GetBuilderBlocksParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
        TError,
        TData,
        QueryKey,
        GetV2GetBuilderBlocksParams["page"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
          TError,
          Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetBuilderBlocksInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
    GetV2GetBuilderBlocksParams["page"]
  >,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderBlocksParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
        TError,
        TData,
        QueryKey,
        GetV2GetBuilderBlocksParams["page"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
          TError,
          Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetBuilderBlocksInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
    GetV2GetBuilderBlocksParams["page"]
  >,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderBlocksParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
        TError,
        TData,
        QueryKey,
        GetV2GetBuilderBlocksParams["page"]
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Builder blocks
 */

export function useGetV2GetBuilderBlocksInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
    GetV2GetBuilderBlocksParams["page"]
  >,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderBlocksParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
        TError,
        TData,
        QueryKey,
        GetV2GetBuilderBlocksParams["page"]
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2GetBuilderBlocksInfiniteQueryOptions(
    params,
    options,
  );

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get Builder blocks
 */
export const prefetchGetV2GetBuilderBlocksInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  queryClient: QueryClient,
  params?: GetV2GetBuilderBlocksParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
        TError,
        TData,
        QueryKey,
        GetV2GetBuilderBlocksParams["page"]
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetV2GetBuilderBlocksInfiniteQueryOptions(
    params,
    options,
  );

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const getGetV2GetBuilderBlocksQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderBlocksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV2GetBuilderBlocksQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2GetBuilderBlocks>>
  > = ({ signal }) =>
    getV2GetBuilderBlocks(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2GetBuilderBlocksQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2GetBuilderBlocks>>
>;
export type GetV2GetBuilderBlocksQueryError =
  | HTTP401NotAuthenticatedErrorResponse
  | HTTPValidationError;

export function useGetV2GetBuilderBlocks<
  TData = Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params: undefined | GetV2GetBuilderBlocksParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
          TError,
          Awaited<ReturnType<typeof getV2GetBuilderBlocks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetBuilderBlocks<
  TData = Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderBlocksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
          TError,
          Awaited<ReturnType<typeof getV2GetBuilderBlocks>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetBuilderBlocks<
  TData = Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderBlocksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Builder blocks
 */

export function useGetV2GetBuilderBlocks<
  TData = Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderBlocksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2GetBuilderBlocksQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get Builder blocks
 */
export const prefetchGetV2GetBuilderBlocksQuery = async <
  TData = Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  queryClient: QueryClient,
  params?: GetV2GetBuilderBlocksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderBlocks>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetV2GetBuilderBlocksQueryOptions(params, options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * Get all integration providers with their block counts.
 * @summary Get Builder integration providers
 */
export type getV2GetBuilderIntegrationProvidersResponse200 = {
  data: ProviderResponse;
  status: 200;
};

export type getV2GetBuilderIntegrationProvidersResponse401 = {
  data: HTTP401NotAuthenticatedErrorResponse;
  status: 401;
};

export type getV2GetBuilderIntegrationProvidersResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getV2GetBuilderIntegrationProvidersResponseComposite =
  | getV2GetBuilderIntegrationProvidersResponse200
  | getV2GetBuilderIntegrationProvidersResponse401
  | getV2GetBuilderIntegrationProvidersResponse422;

export type getV2GetBuilderIntegrationProvidersResponse =
  getV2GetBuilderIntegrationProvidersResponseComposite & {
    headers: Headers;
  };

export const getGetV2GetBuilderIntegrationProvidersUrl = (
  params?: GetV2GetBuilderIntegrationProvidersParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/builder/providers?${stringifiedParams}`
    : `/api/builder/providers`;
};

export const getV2GetBuilderIntegrationProviders = async (
  params?: GetV2GetBuilderIntegrationProvidersParams,
  options?: RequestInit,
): Promise<getV2GetBuilderIntegrationProvidersResponse> => {
  return customMutator<getV2GetBuilderIntegrationProvidersResponse>(
    getGetV2GetBuilderIntegrationProvidersUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2GetBuilderIntegrationProvidersQueryKey = (
  params?: GetV2GetBuilderIntegrationProvidersParams,
) => {
  return [`/api/builder/providers`, ...(params ? [params] : [])] as const;
};

export const getGetV2GetBuilderIntegrationProvidersInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
    GetV2GetBuilderIntegrationProvidersParams["page"]
  >,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderIntegrationProvidersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
        TError,
        TData,
        QueryKey,
        GetV2GetBuilderIntegrationProvidersParams["page"]
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetV2GetBuilderIntegrationProvidersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
    QueryKey,
    GetV2GetBuilderIntegrationProvidersParams["page"]
  > = ({ signal, pageParam }) =>
    getV2GetBuilderIntegrationProviders(
      { ...params, page: pageParam || params?.["page"] },
      { signal, ...requestOptions },
    );

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
    TError,
    TData,
    QueryKey,
    GetV2GetBuilderIntegrationProvidersParams["page"]
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2GetBuilderIntegrationProvidersInfiniteQueryResult =
  NonNullable<Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>>;
export type GetV2GetBuilderIntegrationProvidersInfiniteQueryError =
  | HTTP401NotAuthenticatedErrorResponse
  | HTTPValidationError;

export function useGetV2GetBuilderIntegrationProvidersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
    GetV2GetBuilderIntegrationProvidersParams["page"]
  >,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params: undefined | GetV2GetBuilderIntegrationProvidersParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
        TError,
        TData,
        QueryKey,
        GetV2GetBuilderIntegrationProvidersParams["page"]
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
          TError,
          Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetBuilderIntegrationProvidersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
    GetV2GetBuilderIntegrationProvidersParams["page"]
  >,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderIntegrationProvidersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
        TError,
        TData,
        QueryKey,
        GetV2GetBuilderIntegrationProvidersParams["page"]
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
          TError,
          Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
          QueryKey
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetBuilderIntegrationProvidersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
    GetV2GetBuilderIntegrationProvidersParams["page"]
  >,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderIntegrationProvidersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
        TError,
        TData,
        QueryKey,
        GetV2GetBuilderIntegrationProvidersParams["page"]
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Builder integration providers
 */

export function useGetV2GetBuilderIntegrationProvidersInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
    GetV2GetBuilderIntegrationProvidersParams["page"]
  >,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderIntegrationProvidersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
        TError,
        TData,
        QueryKey,
        GetV2GetBuilderIntegrationProvidersParams["page"]
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getGetV2GetBuilderIntegrationProvidersInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get Builder integration providers
 */
export const prefetchGetV2GetBuilderIntegrationProvidersInfiniteQuery = async <
  TData = Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  queryClient: QueryClient,
  params?: GetV2GetBuilderIntegrationProvidersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
        TError,
        TData,
        QueryKey,
        GetV2GetBuilderIntegrationProvidersParams["page"]
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
): Promise<QueryClient> => {
  const queryOptions =
    getGetV2GetBuilderIntegrationProvidersInfiniteQueryOptions(params, options);

  await queryClient.prefetchInfiniteQuery(queryOptions);

  return queryClient;
};

export const getGetV2GetBuilderIntegrationProvidersQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderIntegrationProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetV2GetBuilderIntegrationProvidersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>
  > = ({ signal }) =>
    getV2GetBuilderIntegrationProviders(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2GetBuilderIntegrationProvidersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>
>;
export type GetV2GetBuilderIntegrationProvidersQueryError =
  | HTTP401NotAuthenticatedErrorResponse
  | HTTPValidationError;

export function useGetV2GetBuilderIntegrationProviders<
  TData = Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params: undefined | GetV2GetBuilderIntegrationProvidersParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
          TError,
          Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetBuilderIntegrationProviders<
  TData = Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderIntegrationProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
          TError,
          Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetBuilderIntegrationProviders<
  TData = Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderIntegrationProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Builder integration providers
 */

export function useGetV2GetBuilderIntegrationProviders<
  TData = Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  params?: GetV2GetBuilderIntegrationProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2GetBuilderIntegrationProvidersQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get Builder integration providers
 */
export const prefetchGetV2GetBuilderIntegrationProvidersQuery = async <
  TData = Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
  TError = HTTP401NotAuthenticatedErrorResponse | HTTPValidationError,
>(
  queryClient: QueryClient,
  params?: GetV2GetBuilderIntegrationProvidersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderIntegrationProviders>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetV2GetBuilderIntegrationProvidersQueryOptions(
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * Get item counts for the menu categories in the Blocks Menu.
 * @summary Get Builder item counts
 */
export type getV2GetBuilderItemCountsResponse200 = {
  data: CountResponse;
  status: 200;
};

export type getV2GetBuilderItemCountsResponse401 = {
  data: HTTP401NotAuthenticatedErrorResponse;
  status: 401;
};

export type getV2GetBuilderItemCountsResponseComposite =
  | getV2GetBuilderItemCountsResponse200
  | getV2GetBuilderItemCountsResponse401;

export type getV2GetBuilderItemCountsResponse =
  getV2GetBuilderItemCountsResponseComposite & {
    headers: Headers;
  };

export const getGetV2GetBuilderItemCountsUrl = () => {
  return `/api/builder/counts`;
};

export const getV2GetBuilderItemCounts = async (
  options?: RequestInit,
): Promise<getV2GetBuilderItemCountsResponse> => {
  return customMutator<getV2GetBuilderItemCountsResponse>(
    getGetV2GetBuilderItemCountsUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetV2GetBuilderItemCountsQueryKey = () => {
  return [`/api/builder/counts`] as const;
};

export const getGetV2GetBuilderItemCountsQueryOptions = <
  TData = Awaited<ReturnType<typeof getV2GetBuilderItemCounts>>,
  TError = HTTP401NotAuthenticatedErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getV2GetBuilderItemCounts>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetV2GetBuilderItemCountsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getV2GetBuilderItemCounts>>
  > = ({ signal }) => getV2GetBuilderItemCounts({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getV2GetBuilderItemCounts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetV2GetBuilderItemCountsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getV2GetBuilderItemCounts>>
>;
export type GetV2GetBuilderItemCountsQueryError =
  HTTP401NotAuthenticatedErrorResponse;

export function useGetV2GetBuilderItemCounts<
  TData = Awaited<ReturnType<typeof getV2GetBuilderItemCounts>>,
  TError = HTTP401NotAuthenticatedErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderItemCounts>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetBuilderItemCounts>>,
          TError,
          Awaited<ReturnType<typeof getV2GetBuilderItemCounts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetBuilderItemCounts<
  TData = Awaited<ReturnType<typeof getV2GetBuilderItemCounts>>,
  TError = HTTP401NotAuthenticatedErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderItemCounts>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getV2GetBuilderItemCounts>>,
          TError,
          Awaited<ReturnType<typeof getV2GetBuilderItemCounts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetV2GetBuilderItemCounts<
  TData = Awaited<ReturnType<typeof getV2GetBuilderItemCounts>>,
  TError = HTTP401NotAuthenticatedErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderItemCounts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Builder item counts
 */

export function useGetV2GetBuilderItemCounts<
  TData = Awaited<ReturnType<typeof getV2GetBuilderItemCounts>>,
  TError = HTTP401NotAuthenticatedErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderItemCounts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetV2GetBuilderItemCountsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get Builder item counts
 */
export const prefetchGetV2GetBuilderItemCountsQuery = async <
  TData = Awaited<ReturnType<typeof getV2GetBuilderItemCounts>>,
  TError = HTTP401NotAuthenticatedErrorResponse,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getV2GetBuilderItemCounts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customMutator>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetV2GetBuilderItemCountsQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
